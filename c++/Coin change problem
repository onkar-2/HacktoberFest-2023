#include <bits/stdc++.h>
using namespace std;

// Recursive solution
int solveRecursive(vector<int> &num, int x) {
    if (x == 0) {
        return 0;
    }
    if (x < 0) {
        return INT_MAX;
    }
    int mini = INT_MAX;
    for (int i = 0; i < num.size(); i++) {
        int ans = solveRecursive(num, x - num[i]);
        if (ans != INT_MAX) {
            mini = min(mini, 1 + ans);
        }
    }
    return mini;
}

int minimumElementsRecursive(vector<int> &num, int x) {
    int ans = solveRecursive(num, x);
    return ans == INT_MAX ? -1 : ans;
}

// Recursive + Memoization solution
int solveMemo(vector<int> &num, int x, vector<int> &dp) {
    if (x == 0) {
        return 0;
    }
    if (x < 0) {
        return INT_MAX;
    }
    if (dp[x] != -1) {
        return dp[x];
    }
    int mini = INT_MAX;
    for (int i = 0; i < num.size(); i++) {
        int ans = solveMemo(num, x - num[i], dp);
        if (ans != INT_MAX) {
            mini = min(mini, 1 + ans);
        }
    }
    dp[x] = mini;
    return dp[x];
}

int minimumElementsMemo(vector<int> &num, int x) {
    vector<int> dp(x + 1, -1);
    int ans = solveMemo(num, x, dp);
    return ans == INT_MAX ? -1 : ans;
}

// Tabulation (Bottom-up DP) solution
int solvetab(vector<int> &num, int x) {
    vector<int> dp(x + 1, INT_MAX);
    dp[0] = 0;
    for (int i = 1; i <= x; i++) {
        for (int j = 0; j < num.size(); j++) {
            if (i - num[j] >= 0 && dp[i - num[j]] != INT_MAX) {
                dp[i] = min(dp[i], 1 + dp[i - num[j]]);
            }
        }
    }
    return dp[x] == INT_MAX ? -1 : dp[x];
}

int minimumElementsTabulation(vector<int> &num, int x) {
    return solvetab(num, x);
}

// Main function to test the solutions
int main() {
    vector<int> num = {1, 2, 3};
    int x = 5;

    // Test the recursive solution
    cout << "Recursive: Minimum number of elements required to form " << x << " is: "
         << minimumElementsRecursive(num, x) << endl;

    // Test the memoization solution
    cout << "Memoization: Minimum number of elements required to form " << x << " is: "
         << minimumElementsMemo(num, x) << endl;

    // Test the tabulation solution
    cout << "Tabulation: Minimum number of elements required to form " << x << " is: "
         << minimumElementsTabulation(num, x) << endl;

    return 0;
}
